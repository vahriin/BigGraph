package output

import (
	"fmt"

	"github.com/vahriin/BigGraph/lib/csv"
	"github.com/vahriin/BigGraph/lib/model"
	"github.com/vahriin/BigGraph/lib/svg"
)

func ProcessPath(csvChan chan<- csv.CSVWriter, svgChan chan<- svg.SVGWriter, al model.AdjList, pathChan <-chan model.Path) {
	var shortestWay svg.Polyline
	var flag bool
	var pathNumber int = 1

	pointsArray := make([]svg.Circle, 0, 10)

	for path := range pathChan {
		csvChan <- csv.Line(path.Points)
		fmt.Printf("%[1]d) Point %[2]d, distation %[3]d meters. Travel time: %[4]d minits.\n",
			pathNumber, path.End(), int(path.Len), int(path.Len/40000*60))
		pathNumber++

		polyline := svg.Polyline{Color: svg.PolylineColor, Width: svg.PolylineWidth, Points: path.Coordinates(al)}
		polylineEnd := svg.Circle{Color: svg.PolylineColor, Radius: svg.PointAttentionRadius, Center: polyline.Points[len(polyline.Points)-1]}
		pointsArray = append(pointsArray, polylineEnd)
		if !flag {
			shortestWay = polyline
			shortestWay.Color = "red"
			pointsArray[0].Color = "red"
			flag = true
			continue
		}

		svgChan <- polyline
		//pointsArray = append(pointsArray)
	}

	svgChan <- shortestWay

	for _, point := range pointsArray {
		svgChan <- point
	}
}

func BrodenPath() model.Path {
	p := model.Path{
		Len:    1296000.0,
		Points: []uint64{769244079, 1401263877, 1116052349, 769244094, 1241167547, 1241167554, 1241167544, 1084164520, 1409373309, 1084164562, 1084164696, 1084164678, 1385615884, 1411840149, 1377296179, 769244084, 1368667763, 1368603307, 1434759793, 1434759805, 1241167585, 1434759806, 1394484418, 1377287739, 697304879, 1377287733, 1411840251, 1381301338, 1381301985, 1381301981, 1383968003, 1381298942, 1381306139, 1365691883, 512435014, 1623113273, 223437152, 2404900822, 517261048, 517261055, 223437154, 1084164725, 223437155, 1096508912, 223437156, 223437157, 1084164537, 223437158, 1096508801, 223437159, 223437161, 1083930661, 223437162, 1083930960, 1083930478, 1083930794, 223437163, 1083930291, 1096508826, 2596300658, 223437164, 2032405399, 1083930784, 223437165, 1096523379, 2032405396, 223437167, 223437170, 223437172, 1083930263, 1083930584, 223437174, 2121788366, 839695553, 223437175, 223437177, 1083930898, 2404900792, 2121788368, 2404900798, 2404900800, 1096523702, 223437179, 1424873164, 1225471475, 1990754211, 1619800846, 5246682298, 5246682295, 611764478, 1990754214, 1990754220, 1990754223, 2893891113, 2893891111, 1990754228, 611764481, 1990754231, 1990754232, 797376642, 1990754235, 1083930208, 1990754237, 1990754240, 1083930535, 611764486, 1249802330, 1990754265, 251940265, 2409462734, 1228874811, 1228874751, 223438353, 249734770, 5246650733, 5246650732, 5246650731, 5246650730, 249734771, 1226617634, 1990743542, 251941004, 1366947239, 1084293625, 1366947257, 1366947261, 251940748, 369352590, 343081264, 1366947357, 223406369, 2121788378, 251932276, 251951058, 223406368, 1084293492, 223406367, 607956246, 607956247, 1990773419, 1367540915, 607960747, 619097737, 2340537039, 1115080963, 2354506897, 3205016624, 4420353709, 619097740, 1986802077, 619097739, 2010381783, 1430828433, 619097738, 2376754654, 697375720, 1331950087, 2151993122, 423806023, 1431826701, 1430828451, 1955237665, 1430828470, 1393829835, 2037708369, 423806025, 2380214199, 2144052013, 1434075989, 2322704909, 1158850751, 3715119432, 423806024, 2144960864, 1393829800, 2144169272, 1375702785, 1369845049, 423806027, 3725684314, 1375673072, 1375673062, 1474060112, 828590231, 251064017, 291338906, 1045775552, 4447188105, 413369755, 413370290, 4447188112, 1431826803, 1431826845, 2145473650, 291994473, 291994474, 250591788, 1241977409, 289451158, 762550683, 4347093062, 250591786, 967098978, 250591785, 1998809345, 830260276, 1998809349, 250591784, 289367518, 289367517, 289372709, 289367508, 984247805, 3864855168, 3864855167, 3864855166, 3864855165, 3864855160, 249711888, 249711887, 4724645487, 223419423, 223419421, 1991910839, 223419419, 1227715712, 1114716537, 1802724512, 1739015339, 1739015353, 2938014620, 1644071049, 4724645510, 4724645511, 4724645509, 1991910843, 1991910846, 1148616989, 1991910858, 1991910867, 1991910895, 1991910917, 1991910958, 1991910989, 1991911057, 1991911073, 1195213517, 1991911090, 1148616940, 1991911102, 1991911112, 1991911117, 1991911125, 1991911135, 1991911138, 1991911144, 1991911152, 1148617103, 1802724518, 1802724520, 1991911175, 223424126, 1802724523, 1802724524, 832785114, 1802724525, 1802724526, 832785212, 1802724527, 1482091560, 1802724529, 832787009, 1802724531, 1482091570, 1802724532, 1802724534, 832785946, 1802724536, 832785343, 1991911262, 832785578, 4208619074, 1482091572, 832785040, 1482091574, 2967071282, 4208619081, 832786711, 2967071283, 1907894832, 1907894833, 832785746, 1990814544, 1990814546, 1990814550, 1990814555, 1576479147, 1576479149, 1576479142, 1576479145, 1576479139, 1576479141, 1576502083, 1990814599, 1990814578, 1990814567, 1990814562, 4208625992, 4208625991, 1990814548, 3816689077, 967099065, 223433950, 3136351689, 1901717249, 1148616957, 1901717234, 223433948, 1901717222, 223433946, 1901717210, 3816689074, 223433944, 1901717171, 223433942, 1901717117, 1901717087, 223433941, 3816689073, 223433939, 1901716873, 223433937, 1901716856, 223433935, 3816689072, 223433932, 223433931, 944460921, 223433930, 1148617155, 223431873, 3816689070, 3816689069, 3816689068, 223431872, 3816689067, 1148617124, 3816689066, 2154782131, 3816689065, 3816689064, 3816689063, 223431868, 223431866, 223431863, 5214567998, 2438462427, 2438462418, 5214567993, 223431859, 2438462413, 2438462410, 5214567992, 2438462405, 5214567991, 5214567990, 3816689062, 5214567989, 5214567988, 223431858, 5214567987, 5214567986, 5214567985, 5214567984, 5214567983, 5214567982, 223431856, 5214567970, 5214567974, 5214567975, 5214567976, 5214567977, 5214567978, 5214567979, 5214567980, 5214567981, 5214567973, 5214567972, 3816689061, 3816689060, 3816689059, 223431849, 3816689058, 223446484, 3816689057, 223431847, 223446486, 3816683756, 3816683755, 1367615637, 223446487, 223446489, 223446490, 223446493, 223446495, 223446497, 3885312553, 3885312554, 223446499, 1889544459, 223446501, 223446503, 223446505, 223446507, 223446510, 223446512, 223446514, 223446516, 223446517, 2314246256, 1383309034, 1084164535, 223446518, 1241167539, 1401264426, 512435018, 1383957909, 1401264419, 223446520, 1241167573, 1241167537, 1116052445, 223446522, 1116052261, 1083930414, 1401263920, 223446525, 1377294687, 769244079}}

	fmt.Println("As we make our way to heaven")
	fmt.Println("Through the Nazi lines!")
	fmt.Println("PRIMO VICTORIA!!!")

	return p
}
